{"ast":null,"code":"var _jsxFileName = \"D:\\\\React-weather-app\\\\weather-app\\\\src\\\\App.js\";\nimport React from \"react\";\nimport Titles from \"./components/Titles\";\nimport Form from \"./components/Form\";\nimport Weather from \"./components/Weather\";\nconst API_KEY = \"2e863c191c07d3aeff1f0ea8a4ed6003\";\n\nclass App extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      temperature: undefined,\n      feels: undefined,\n      city: undefined,\n      country: undefined,\n      humidity: undefined,\n      description: undefined,\n      error: undefined\n    };\n\n    this.getWeather = async e => {\n      e.preventDefault(); //Going to prevent defaults behaviour. NO REFRESH SEE CONTENT ON CONSOLE\n\n      const city = e.target.elements.city.value;\n      const country = e.target.elements.country.value; //Allow you to use .this indepently\n\n      const api_call = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${API_KEY}&units=metric`);\n      const data = await api_call.json();\n\n      if (city && country) {\n        console.log(data); //STATE vars instead of this.name = name; we can do it like that\n\n        this.setState({\n          temperature: data.main.temp,\n          feels: data.main.feels_like,\n          city: data.name,\n          country: data.sys.country,\n          humidity: data.main.humidity,\n          description: data.weather[0].description,\n          error: \"\"\n        });\n      } else {\n        this.setState({\n          temperature: undefined,\n          feels: undefined,\n          city: undefined,\n          country: undefined,\n          humidity: undefined,\n          description: undefined,\n          error: \"Please enter a valid city and country!\"\n        });\n      }\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"wrapper\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"main\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-xs-5 title-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Titles, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 19\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-xs-7 title-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Form, {\n      getWeather: this.getWeather,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 19\n      }\n    }), /*#__PURE__*/React.createElement(Weather, {\n      temperature: this.state.temperature,\n      feels: this.state.feels,\n      city: this.state.city,\n      country: this.state.country,\n      humidity: this.state.humidity,\n      description: this.state.description,\n      error: this.state.error,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 19\n      }\n    })))))));\n  }\n\n}\n\nexport default App; //allows it to be imported elsewhere","map":{"version":3,"sources":["D:/React-weather-app/weather-app/src/App.js"],"names":["React","Titles","Form","Weather","API_KEY","App","Component","state","temperature","undefined","feels","city","country","humidity","description","error","getWeather","e","preventDefault","target","elements","value","api_call","fetch","data","json","console","log","setState","main","temp","feels_like","name","sys","weather","render"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport Titles from \"./components/Titles\";\nimport Form from \"./components/Form\";\nimport Weather from \"./components/Weather\";\n\nconst API_KEY = \"2e863c191c07d3aeff1f0ea8a4ed6003\";\n\nclass App extends React.Component {\n  state = {\n    temperature: undefined,\n    feels: undefined,\n    city: undefined,\n    country: undefined,\n    humidity: undefined,\n    description: undefined,\n    error: undefined,\n  };\n\n  //OLD WAY\n  // constructor(){\n  //   this.getWeather = this.getWeather.bind(this);\n  // }\n  // getWeather(){\n\n  // }\n  // OUR CALL TO THE API TO GET THE WEATHER FROM OPENWEATHER\n\n  getWeather = async (e) => {\n    e.preventDefault(); //Going to prevent defaults behaviour. NO REFRESH SEE CONTENT ON CONSOLE\n\n    const city = e.target.elements.city.value;\n    const country = e.target.elements.country.value;\n    //Allow you to use .this indepently\n    const api_call = await fetch(\n      `https://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${API_KEY}&units=metric`\n    );\n    const data = await api_call.json();\n    if (city && country) {\n      console.log(data);\n\n      //STATE vars instead of this.name = name; we can do it like that\n      this.setState({\n        temperature: data.main.temp,\n        feels: data.main.feels_like,\n        city: data.name,\n        country: data.sys.country,\n        humidity: data.main.humidity,\n        description: data.weather[0].description,\n        error: \"\",\n      });\n    } else {\n      this.setState({\n        temperature: undefined,\n        feels: undefined,\n        city: undefined,\n        country: undefined,\n        humidity: undefined,\n        description: undefined,\n        error: \"Please enter a valid city and country!\",\n      });\n    }\n  };\n\n  render() {\n    return (\n      <div>\n        <div className=\"wrapper\">\n          <div className=\"main\">\n            <div className=\"container\">\n              <div className=\"row\">\n                <div className=\"col-xs-5 title-container\">\n                  <Titles />\n                </div>\n                <div className=\"col-xs-7 title-container\">\n                  {/*Allow us to redirect the method to form*/}\n                  <Form getWeather={this.getWeather} />\n                  <Weather\n                    temperature={this.state.temperature}\n                    feels={this.state.feels}\n                    city={this.state.city}\n                    country={this.state.country}\n                    humidity={this.state.humidity}\n                    description={this.state.description}\n                    error={this.state.error}\n                  />\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App; //allows it to be imported elsewhere\n"]},"metadata":{},"sourceType":"module"}